# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # see https://circleci.com/developer/orbs/orb/circleci/aws-cli
  aws-cli: circleci/aws-cli@2.0.3

commands:
  print_pipeline_id:
    description: Print a pipeline ID
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  print-hello:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: "print hello"
          command: "echo hello"

  print-world:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: "print world"
          command: "echo world"

  print-my-name:
    docker:
      - image: alpine:latest
    steps:
      - run: echo $MY_NAME

  save_hello_world_output:
    docker:
      - image: alpine:latest
    steps:
      - run: echo "hello world from file" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  print_output_file:
    docker:
      - image: alpine:latest
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run: cat /tmp/workspace/output.txt

  dummy-job:
    docker:
      - image: alpine:latest
    steps:
      - print_pipeline_id

  fail-on-purpose:
    docker:
      - image: alpine:latest
    steps:
      - run: return 1
      - run:
          command: echo job failed
          when: on_fail

  # see https://circleci.com/developer/orbs/orb/circleci/aws-cli
  add-ec2-instances-ip-to-ansible-inventory:
    parameters:
      access-key:
        type: env_var_name
        default: AWS_ACCESS_KEY
      secret-key:
        type: env_var_name
        default: AWS_SECRET_ACCESS_KEY
      region:
        type: env_var_name
        default: AWS_REGION
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: << parameters.access-key >>
          aws-secret-access-key: << parameters.secret-key >>
          aws-region: << parameters.region >>
      - run:
          name: get and add ec2 instances ip
          command: |
            cat ./ansible/inventory.txt
            echo ------------------------
            chmod ugo+rwx ./ansible/add-ec2-instances-ip-to-inventory.sh
            chmod ugo+rwx ./ansible/get-ec2-instances-ip.sh
            ./ansible/get-ec2-instances-ip.sh
            ./ansible/add-ec2-instances-ip-to-inventory.sh
            echo ------------------------
            cat ./ansible/inventory.txt
            echo ------------------------
      - save_cache:
          paths:
            - ./ansible/inventory.txt
          key: ansible-inventory-{{ .Environment.CIRCLE_WORKFLOW_ID }}

  print-ansible-inventory:
    docker:
      - image: alpine:latest
    steps:
      - restore_cache:
          keys:
            - ansible-inventory-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: cat ./inventory.txt

  create-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      - run:
          name: set up ec2 instance in AWS with CloudFormation
          command: create-stack.sh udacity-circleci template.yaml

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  my-workflow:
    jobs:
      - say-hello
#      - print-hello
#      - print-world:
#          requires: [print-hello]
#      - print-my-name
#      - save_hello_world_output
#      - print_output_file:
#          requires: [save_hello_world_output]
#      - dummy-job
#      - fail-on-purpose
#      - add-ec2-instances-ip-to-ansible-inventory
#      - print-ansible-inventory:
#          requires: [add-ec2-instances-ip-to-ansible-inventory]
      - create-infrastructure
